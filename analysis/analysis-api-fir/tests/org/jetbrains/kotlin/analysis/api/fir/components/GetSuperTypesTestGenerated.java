/*
 * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.
 * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.
 */

package org.jetbrains.kotlin.analysis.api.fir.components;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.util.KtTestUtil;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.jupiter.api.Nested;
import org.junit.jupiter.api.Test;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link GenerateNewCompilerTests.kt}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("analysis/analysis-api/testData/components/getSuperTypes")
@TestDataPath("$PROJECT_ROOT")
public class GetSuperTypesTestGenerated extends AbstractGetSuperTypesTest {
    @Test
    public void testAllFilesPresentInGetSuperTypes() throws Exception {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("analysis/analysis-api/testData/components/getSuperTypes"), Pattern.compile("^(.+)\\.kt$"), null, true);
    }

    @Test
    @TestMetadata("anonymousObject.kt")
    public void testAnonymousObject() throws Exception {
        runTest("analysis/analysis-api/testData/components/getSuperTypes/anonymousObject.kt");
    }

    @Test
    @TestMetadata("any.kt")
    public void testAny() throws Exception {
        runTest("analysis/analysis-api/testData/components/getSuperTypes/any.kt");
    }

    @Test
    @TestMetadata("contravariant.kt")
    public void testContravariant() throws Exception {
        runTest("analysis/analysis-api/testData/components/getSuperTypes/contravariant.kt");
    }

    @Test
    @TestMetadata("covariant.kt")
    public void testCovariant() throws Exception {
        runTest("analysis/analysis-api/testData/components/getSuperTypes/covariant.kt");
    }

    @Test
    @TestMetadata("errorType.kt")
    public void testErrorType() throws Exception {
        runTest("analysis/analysis-api/testData/components/getSuperTypes/errorType.kt");
    }

    @Test
    @TestMetadata("flexibleType.kt")
    public void testFlexibleType() throws Exception {
        runTest("analysis/analysis-api/testData/components/getSuperTypes/flexibleType.kt");
    }

    @Test
    @TestMetadata("int.kt")
    public void testInt() throws Exception {
        runTest("analysis/analysis-api/testData/components/getSuperTypes/int.kt");
    }

    @Test
    @TestMetadata("invariant.kt")
    public void testInvariant() throws Exception {
        runTest("analysis/analysis-api/testData/components/getSuperTypes/invariant.kt");
    }

    @Test
    @TestMetadata("recursiveTypeParameter.kt")
    public void testRecursiveTypeParameter() throws Exception {
        runTest("analysis/analysis-api/testData/components/getSuperTypes/recursiveTypeParameter.kt");
    }

    @Test
    @TestMetadata("regularClass.kt")
    public void testRegularClass() throws Exception {
        runTest("analysis/analysis-api/testData/components/getSuperTypes/regularClass.kt");
    }

    @Test
    @TestMetadata("regularClassWithBounds.kt")
    public void testRegularClassWithBounds() throws Exception {
        runTest("analysis/analysis-api/testData/components/getSuperTypes/regularClassWithBounds.kt");
    }

    @Test
    @TestMetadata("star.kt")
    public void testStar() throws Exception {
        runTest("analysis/analysis-api/testData/components/getSuperTypes/star.kt");
    }

    @Test
    @TestMetadata("string.kt")
    public void testString() throws Exception {
        runTest("analysis/analysis-api/testData/components/getSuperTypes/string.kt");
    }

    @Test
    @TestMetadata("typeParameter.kt")
    public void testTypeParameter() throws Exception {
        runTest("analysis/analysis-api/testData/components/getSuperTypes/typeParameter.kt");
    }
}
