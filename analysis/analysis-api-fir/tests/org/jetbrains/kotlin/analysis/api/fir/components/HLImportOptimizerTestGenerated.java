/*
 * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.
 * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.
 */

package org.jetbrains.kotlin.analysis.api.fir.components;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.util.KtTestUtil;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.jupiter.api.Nested;
import org.junit.jupiter.api.Test;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link GenerateNewCompilerTests.kt}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("analysis/analysis-api/testData/components/importOptimizer")
@TestDataPath("$PROJECT_ROOT")
public class HLImportOptimizerTestGenerated extends AbstractHLImportOptimizerTest {
    @Test
    public void testAllFilesPresentInImportOptimizer() throws Exception {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("analysis/analysis-api/testData/components/importOptimizer"), Pattern.compile("^([^.]+)\\.kt$"), null, true);
    }

    @Test
    @TestMetadata("unusedAliasedTypeImport.kt")
    public void testUnusedAliasedTypeImport() throws Exception {
        runTest("analysis/analysis-api/testData/components/importOptimizer/unusedAliasedTypeImport.kt");
    }

    @Test
    @TestMetadata("unusedFunctionImports.kt")
    public void testUnusedFunctionImports() throws Exception {
        runTest("analysis/analysis-api/testData/components/importOptimizer/unusedFunctionImports.kt");
    }

    @Test
    @TestMetadata("unusedInvokeOperatorImport.kt")
    public void testUnusedInvokeOperatorImport() throws Exception {
        runTest("analysis/analysis-api/testData/components/importOptimizer/unusedInvokeOperatorImport.kt");
    }

    @Test
    @TestMetadata("usedAliasedFunctionReference.kt")
    public void testUsedAliasedFunctionReference() throws Exception {
        runTest("analysis/analysis-api/testData/components/importOptimizer/usedAliasedFunctionReference.kt");
    }

    @Test
    @TestMetadata("usedAliasedTypeImport.kt")
    public void testUsedAliasedTypeImport() throws Exception {
        runTest("analysis/analysis-api/testData/components/importOptimizer/usedAliasedTypeImport.kt");
    }

    @Test
    @TestMetadata("usedFunctionImport.kt")
    public void testUsedFunctionImport() throws Exception {
        runTest("analysis/analysis-api/testData/components/importOptimizer/usedFunctionImport.kt");
    }

    @Test
    @TestMetadata("usedInvokeOperatorAliasedImport.kt")
    public void testUsedInvokeOperatorAliasedImport() throws Exception {
        runTest("analysis/analysis-api/testData/components/importOptimizer/usedInvokeOperatorAliasedImport.kt");
    }

    @Test
    @TestMetadata("usedInvokeOperatorExplicitImport.kt")
    public void testUsedInvokeOperatorExplicitImport() throws Exception {
        runTest("analysis/analysis-api/testData/components/importOptimizer/usedInvokeOperatorExplicitImport.kt");
    }

    @Test
    @TestMetadata("usedInvokeOperatorImport.kt")
    public void testUsedInvokeOperatorImport() throws Exception {
        runTest("analysis/analysis-api/testData/components/importOptimizer/usedInvokeOperatorImport.kt");
    }

    @Nested
    @TestMetadata("analysis/analysis-api/testData/components/importOptimizer/referencesWithErrors")
    @TestDataPath("$PROJECT_ROOT")
    public class ReferencesWithErrors {
        @Test
        public void testAllFilesPresentInReferencesWithErrors() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("analysis/analysis-api/testData/components/importOptimizer/referencesWithErrors"), Pattern.compile("^([^.]+)\\.kt$"), null, true);
        }

        @Test
        @TestMetadata("usedConstructor_invalidArguments.kt")
        public void testUsedConstructor_invalidArguments() throws Exception {
            runTest("analysis/analysis-api/testData/components/importOptimizer/referencesWithErrors/usedConstructor_invalidArguments.kt");
        }

        @Test
        @TestMetadata("usedConstructor_missingCall.kt")
        public void testUsedConstructor_missingCall() throws Exception {
            runTest("analysis/analysis-api/testData/components/importOptimizer/referencesWithErrors/usedConstructor_missingCall.kt");
        }

        @Test
        @TestMetadata("usedExtensionFunction_invalidArguments.kt")
        public void testUsedExtensionFunction_invalidArguments() throws Exception {
            runTest("analysis/analysis-api/testData/components/importOptimizer/referencesWithErrors/usedExtensionFunction_invalidArguments.kt");
        }

        @Test
        @TestMetadata("usedExtensionProperty_invalidReceiver.kt")
        public void testUsedExtensionProperty_invalidReceiver() throws Exception {
            runTest("analysis/analysis-api/testData/components/importOptimizer/referencesWithErrors/usedExtensionProperty_invalidReceiver.kt");
        }

        @Test
        @TestMetadata("usedInvokeOperator_invalidArguments.kt")
        public void testUsedInvokeOperator_invalidArguments() throws Exception {
            runTest("analysis/analysis-api/testData/components/importOptimizer/referencesWithErrors/usedInvokeOperator_invalidArguments.kt");
        }

        @Test
        @TestMetadata("usedTypeImport_missingGeneric.kt")
        public void testUsedTypeImport_missingGeneric() throws Exception {
            runTest("analysis/analysis-api/testData/components/importOptimizer/referencesWithErrors/usedTypeImport_missingGeneric.kt");
        }
    }
}
